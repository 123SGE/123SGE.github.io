/*this is where my CSS code will go for "./index.html" */  

/*se;mi; co;lons; ...;  don't; for;get; them;...;*/

.link:visited /*the link status indicators don't need to only apply to <a> tags*/ {
  background-color: black; /*This changes the area behind class="link" items to black in a highlighter-like fashion*/
  color: yellow; /*This changes the color of class="link" items to yellow*/
  text-decoration: underline; /*underlines class="link" items*/
}

a /* when left alone, the following effects will occur to <a> elements*/ {
  color: blue;
}

a:link {
  /*used to indicate that there is a link*/
}

a:hover /*when hovering the mouse over an <a> element, the following effects will occur*/ {
  color: green; 
  curso: pointer; /*this changes the icon of the mouse to further obvious interactivity*/
  text-decoration: none; /*removes default underlining from hyperlink*/
}

a:active {
  /*...not sure what this one is yet...*/
}

a:visited {
  /*indicates that a link has already been visited*/
}

p {
  border: /*I don't fully understand how this one works yet*/
}

button {
  /*these are some skeumorphic button options*/
  border: 1px solid #466995;
  border-radius: 10px;
  box-shadow: 0px 4px;
}

button:active /*still skeumorphic*/ {
  margin-top: 24px;
  margin-bottom: 16px;
  box-shadow: 0px 0px;
  background-color: #C0D6DF;
  color: #ffffff;
}

/*then... there's the MUCH simper FLAT style button*/

button {
  border: 1px solid #466995;
}

button:active {
  background-color: #C0D6DF;
  color: #ffffff;
}

/*breadcrumbs are another form of button that can help a user quickly navigate through a site like a lengthy Wiki page*/
/*this could look something like...
breadcrumb > li {
  display: inline;
}

.breadcrumb li+li::before {
	padding: 10px;
  content: ">";
}

.breadcrumb a {
  text-decoration: none;
}

.breadcrumb a:hover {
  color: red;
}*/

/*this is what styled arrow breadcrumbs would look like

.breadcrumb {
  text-align: left;
}
.breadcrumb li {
  float: left;
}
.breadcrumb a {
  color: #fff;
  background: darkcyan;
  text-decoration: none;
  position: relative;
  height: 30px;
  line-height: 30px;
  text-align: center;
  margin-right: 15px;
  padding: 0 5px;
}
.breadcrumb a:hover {
  background-color: blue;
}
.breadcrumb a:hover::before {
  border-color: blue;
  border-left-color: transparent;
}
.breadcrumb a:hover::after{
  border-left-color: blue;
}
.breadcrumb a::before,
.breadcrumb a::after {
  content: "";
  position: absolute;
  border-color: darkcyan;
  border-style: solid;
  border-width: 15px 5px;
}
.breadcrumb a::before {
  left: -10px;
  border-left-color: transparent;
}
.breadcrumb a::after {
  left: 100%;
  border-color: transparent;
  border-left-color: darkcyan;
}*/

/*If you have multiple in-line block you'd like to display in line, change "display:" to "flex;"
In the same sense, inline-flex can place multiple sets of divs into the same line if all pixels allow for it
The justify-content: item also permits use of #flexstart {
  [align left to right]
	justify-content: flex-start; (shoves content to center of <div>), flex-end;(shoves content to end of <div>), center;(centers content in div), space-around; (spaces content neatly, centered and with spaces on the side), and space-between; (spaces content similarly to space-around without the room on the edges)
  [align vertical]
	align-itmes: flex-start; (top of <div>), flex-end; (bottom of <div>), center; (veritically centered in <div>), baseline; (bottom content of all items will align with one another), stretch; (if possible, the items will stretch from top to bottom of the container (this is the default value; elements with a specified height will not stretch; elements with a minimum height or no height specified will stretch).
  [fit items to look more naturally fitting]
	flex-grow: 1;, flex-grow: 2;, flex-shrink: 1;, flex-shrink: 2;, flex-basis: (allows dimensions to be spcified for flex-grow and flex-shrink), etc
	flex: (allows for all of this to be run in one line and is different from display: flex) (these 3 values are declared in the order of flex-grow, flex-shrink, then flex-basis in this specific order) (flex-shrink is the only value that can't be input without first inputting the flex-grow value to its default 0 due to this) (do not include commas, only spaces for these values prior to the ;)
  [move items to the next line when necessary]
	flex-wrap: wrap;, nowrap (default value, same as not inputting a flex-wrap rule), wrap reverse; (wraps the end <div> above the rest), 
  []
	align-content: flex-start (positions at the top of the parent container - no extra space between), flex-end; (positions at the bottom of the parent container with no space between), center;, space-between; (spaces evenly from the top to the bottom of the container with no space above the first or below the last), space-around; (elements will be spaced evenly from the top to the bottom of the container with the same amount of space at the top and bottom and between each element), stretch; (if a minimum height or no height is specified, the rows of elements will stretch to fill the parent container from top to bottom (default value))
  [adjust horizontal and vertical orderings of <div>'s]
	flex-direction: row; (elements aligned in order in a horizontal row), row-reverse; (elements align in reverse order in a horizontal row), column; (elements align in top to bottom order in a column), column-reverse; (elements align in bottom to top order in a vertical column)
  [declare BOTH flex-wrap & flex-direction at the same time]
	flex-flow: {input flex-wrap element i.e. "column"} {input flex-direction element i.e. wrap};
*/

/* display: grid; & display: inline-grid;

	[columns] - Grids have one column by default - grid-template-columns: (i.e. "100px 50% 200px;", "20% 10% 70%;", "5% 100px 6j9px;" etc)
		This allows for a specific number of pixels to be used per column or a cerrtain % of page width to be used up per column.
			Using this system, <div>'s "A","B","C","D","E","F","G" would appear as
			A B C
			D E F
			G
			if <div>'s were ordered alphabetically
	[rows] - Grids have as many items as there are divided by columns (i.e. 9 items over one column equals 9 rows, 7 items over 3 colums equals 2.333 rows or 2 rows with one item in the final row) by default - grid-template-rows:
		Shocking, but the same fundamental concepts can be applied to rows in more of an x-direciton than a y-direction
	[rows / columns] - grid-template:
		This simply places rows before columns with a slash and takes care of both of the previous two formatting tools
*/
