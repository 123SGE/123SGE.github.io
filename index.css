/*this is where my CSS code will go for "./index.html" */  

/*se;mi; co;lons; ...;  don't; for;get; them;...;*/

.link:visited /*the link status indicators don't need to only apply to <a> tags*/ {
  background-color: black; /*This changes the area behind class="link" items to black in a highlighter-like fashion*/
  color: yellow; /*This changes the color of class="link" items to yellow*/
  text-decoration: underline; /*underlines class="link" items*/
}

a /* when left alone, the following effects will occur to <a> elements*/ {
  color: blue;
}

a:link {
  /*used to indicate that there is a link*/
}

a:hover /*when hovering the mouse over an <a> element, the following effects will occur*/ {
  color: green; 
  curso: pointer; /*this changes the icon of the mouse to further obvious interactivity*/
  text-decoration: none; /*removes default underlining from hyperlink*/
}

a:active {
  /*...not sure what this one is yet...*/
}

a:visited {
  /*indicates that a link has already been visited*/
}

p {
  border: /*I don't fully understand how this one works yet*/
}

button {
  /*these are some skeumorphic button options*/
  border: 1px solid #466995;
  border-radius: 10px;
  box-shadow: 0px 4px;
}

button:active /*still skeumorphic*/ {
  margin-top: 24px;
  margin-bottom: 16px;
  box-shadow: 0px 0px;
  background-color: #C0D6DF;
  color: #ffffff;
}

/*then... there's the MUCH simper FLAT style button*/

button {
  border: 1px solid #466995;
}

button:active {
  background-color: #C0D6DF;
  color: #ffffff;
}

/*breadcrumbs are another form of button that can help a user quickly navigate through a site like a lengthy Wiki page*/
/*this could look something like...
breadcrumb > li {
  display: inline;
}

.breadcrumb li+li::before {
	padding: 10px;
  content: ">";
}

.breadcrumb a {
  text-decoration: none;
}

.breadcrumb a:hover {
  color: red;
}*/

/*this is what styled arrow breadcrumbs would look like

.breadcrumb {
  text-align: left;
}
.breadcrumb li {
  float: left;
}
.breadcrumb a {
  color: #fff;
  background: darkcyan;
  text-decoration: none;
  position: relative;
  height: 30px;
  line-height: 30px;
  text-align: center;
  margin-right: 15px;
  padding: 0 5px;
}
.breadcrumb a:hover {
  background-color: blue;
}
.breadcrumb a:hover::before {
  border-color: blue;
  border-left-color: transparent;
}
.breadcrumb a:hover::after{
  border-left-color: blue;
}
.breadcrumb a::before,
.breadcrumb a::after {
  content: "";
  position: absolute;
  border-color: darkcyan;
  border-style: solid;
  border-width: 15px 5px;
}
.breadcrumb a::before {
  left: -10px;
  border-left-color: transparent;
}
.breadcrumb a::after {
  left: 100%;
  border-color: transparent;
  border-left-color: darkcyan;
}*/

/*If you have multiple in-line block you'd like to display in line, change "display:" to "flex;"
In the same sense, inline-flex can place multiple sets of divs into the same line if all pixels allow for it
The justify-content: item also permits use of #flexstart {
  [align left to right]
	justify-content: flex-start; (shoves content to center of <div>), flex-end;(shoves content to end of <div>), center;(centers content in div), space-around; (spaces content neatly, centered and with spaces on the side), and space-between; (spaces content similarly to space-around without the room on the edges)
  [align vertical]
	align-itmes: flex-start; (top of <div>), flex-end; (bottom of <div>), center; (veritically centered in <div>), baseline; (bottom content of all items will align with one another), stretch; (if possible, the items will stretch from top to bottom of the container (this is the default value; elements with a specified height will not stretch; elements with a minimum height or no height specified will stretch).
  [fit items to look more naturally fitting]
	flex-grow: 1;, flex-grow: 2;, flex-shrink: 1;, flex-shrink: 2;, flex-basis: (allows dimensions to be spcified for flex-grow and flex-shrink), etc
	flex: (allows for all of this to be run in one line and is different from display: flex) (these 3 values are declared in the order of flex-grow, flex-shrink, then flex-basis in this specific order) (flex-shrink is the only value that can't be input without first inputting the flex-grow value to its default 0 due to this) (do not include commas, only spaces for these values prior to the ;)
  [move items to the next line when necessary]
	flex-wrap: wrap;, nowrap (default value, same as not inputting a flex-wrap rule), wrap reverse; (wraps the end <div> above the rest), 
  []
	align-content: flex-start (positions at the top of the parent container - no extra space between), flex-end; (positions at the bottom of the parent container with no space between), center;, space-between; (spaces evenly from the top to the bottom of the container with no space above the first or below the last), space-around; (elements will be spaced evenly from the top to the bottom of the container with the same amount of space at the top and bottom and between each element), stretch; (if a minimum height or no height is specified, the rows of elements will stretch to fill the parent container from top to bottom (default value))
  [adjust horizontal and vertical orderings of <div>'s]
	flex-direction: row; (elements aligned in order in a horizontal row), row-reverse; (elements align in reverse order in a horizontal row), column; (elements align in top to bottom order in a column), column-reverse; (elements align in bottom to top order in a vertical column)
  [declare BOTH flex-wrap & flex-direction at the same time]
	flex-flow: {input flex-wrap element i.e. "column"} {input flex-direction element i.e. wrap};
*/

/* display: grid; & display: inline-grid;

	[columns] - Grids have one column by default - grid-template-columns: (i.e. "100px 50% 200px;", "20% 10% 70%;", "5% 100px 69px;", "3 fr 50% 1fr", etc) (some of these examples include percentages, pixels, and fractions, and they are all interchangeable and can mingle)
		This allows for a specific number of pixels to be used per column or a cerrtain % of page width to be used up per column.
			Using this system, <div>'s "A","B","C","D","E","F","G" would appear as
			A B C
			D E F
			G
			if <div>'s were ordered alphabetically
	[rows] - Grids have as many items as there are divided by columns (i.e. 9 items over one column equals 9 rows, 7 items over 3 colums equals 2.333 rows or 2 rows with one item in the final row) by default - grid-template-rows:
		Shocking, but the same fundamental concepts can be applied to rows in more of an x-direciton than a y-direction
	[rows / columns] - grid-template:
		This simply places rows before columns with a slash and takes care of both of the previous two formatting tools
	[repeat() function] - "repeat ({number of rows or columns}, {size of rows})"
		This can be used with row / column grid-templates and is used to repeat the number of rows / columns in a format.
	[minmax function] - "grid-template-row: 100px minmax(100px, 500px) 100px"
		The above function will create a row with 100px, one ranging from 100px-500px, and one final row 100px.
		The width and height CSS restrictions must be removed for this to function.
	[gap] - "gap: {row-gap}px {column-gap}px", "row-gap:", and "column-gap:"
		The gap function allows for as many gaps to be placed as there are rows or columns (each minus 1 because gaps don't expand to either edge of the grid)
	[multiple rows/columns] - "grid-row-start:", "grid-row-end:"
		When editing SPECIFIC items WITHIN the grid, they can take up multiple spaces using these functions to determine where they start and end. 
			Syntax: "grid-row-start: 1
				 grid-row-end: 3" would span an item within the grid to include rows 1 and 2
			Syntax: "grid-row: 1/3" achieves the same result
		The same idea can be used with columns.
		"/ span #" function allows grid-{row/column}-start to have "/ span {# of rows item continues on for}", but can also be used "span # / {grid-column/row-end #}"
			This function helps avoid one-off errors.

		[grid-area:] - Values are interpreted as "grid-area: {grid-row-start #} / {grid-column-start #} / {grid-row-end #} / {grid-column-end #}"
			"span" can still be used in these contexts
	[grid-template-areas:] - This function can create multiple rows and columns using .item (class) titles to format each by their individual items
			Syntax: 
				grid-template-areas: "header header"
						     "nav nav"
						     "info services"
						     "footer footer"
			- This creates a grid consisting of 5 item / class containers (.header, .nav, .info, .services, & .footer) consisting of 2 columns with four rows in each (the third row contains two individual item / class containers (.info & .services)
			- This then requires grid-template-row: (4 in this case) , and grid-template-column: (2 in this case)
			- Within EACH of these item / classes the...[grid-area:] function must be used to specify which item / class / container matches to each item on the grid.
				Syntax: (continued from above example)
					.header {
						grid-area: header;
					}
			-...This will automatically span the top two columns in the first row.

			-Overlapping can be achieved by sharing the same grid-area and utilizing the z-index function
			
			- To center item cards within columns, use "justify-items: center;" and set the "px" of the container to "width:" to the desired number fewer than the "width" of the column's width.

		- [justify-content: center;] achieves a similar effect involving the entirety of the row as opposed to a singular item within the parental column(s) specified by the child grid item.
		- [align-items: {start, end, center, stretch, etc};] achieves the content within the container within the grid being fit to a certain area of the container within the grid.
		- [align-content] can assist with the alignment of rows on the page.
	...and all four of these tools can be used in tandem with one another.
	[justify-self:] - overides justify-items and specifies how a specific item should position itself along the row axis
	[align-self:] - overides align-items and specifies how a specific item should position itself along the column axis

	[grid-auto-rows: {#px};] - collaborates with...
	[grid-auto-columns: {#px};] ... to create an automatic grid from from any additional <div>'s created
		Syntax: 
			(html code)
				<body>
					<div>Part 1</div>
					<div>Part 2</div>
					<div>Part 3</div>
					<div>Part 4</div>
					<div>Part 5</div>
				</body>
			(css code)
				body {
				 display: grid;
				 grid: repeat(2, 100px) / repeat(2, 150px); 
				 grid-auto-rows: 50px;
				}
		This creates a grid 2x2 with an additional row 5 all at 50 pixels due to the implicitly added <div> ranges referenced against the ruleset
	[grid-auto-flow:] - "specifies whether new elements should be added to rows or columns, and is declared on grid containers"
		[row;] - "specifies the new elements should fill rows from left to right and create new rows when there are too many elements (default)"
		[column;] - "specifies the new elements should fill columns from top to bottom and create new columns when there are too many elements"
		[dense;] - " this keyword invokes an algorithm that attempts to fill holes earlier in the grid layout if smaller elements are added"
			- Rows or columns may be paired with dense in this Syntax - "grid-auto-flow: row dense;"

Relative Sizing & Responsive Sites

	[Em] - Represents the font-size of the current element or the default base font-size set by the browser if none is given. 
		{Historically, "em" represented the width of an "M" in the typeface being used}
	     - The default size of font in a browser is typically 16 pixels so 2em would = 32px
	     - Em's can be used in decimal form (i.e. 1.5, 1.7, etc.)
	[Rem] - "Root em"
	        - Checks the root element instead of the parent element to determine relative size
		- In general, this is 16 pixels. To set a different font size (for the <body> for example), use the following...
			Syntax: html {
					font-size: 20px;
				     }
				body {
				 	font-size: 2rem;
				     }

	[%] - Used to model box-model non-text html elements (i.e. height, width, padding, border and margins)
	    - To use subsections within main sections, set the width of the main section (with pixels (px) for example) and use percentages within the subsection css as seen in the following
			Syntax:
				.main {
				  height: 300px;
				  width: 500px;
				}
 
				.main .subsection {
				  height: 50%;
				  width: 50%;
				}
	   - Try not to use % with box model at 100% as it will include container, border, padding and margin and may overflow its parent container
	[min-width:, max-width:, min-height: & max-height:] - help to limit the minimum and maximum widths and heights of html elements
				 - typically utilized in px
	[scaling images and videos] - Common occurance used for scaling videos and images to fit properly on page.
		Syntax:
			.container {
			  width: 50%;	
			  height: 200px;
			  overflow: hidden;
			}

			.container img {
			  max-width: 100%;
			  height: auto;
			  display: block;
			}
	[scaling background images] - used to scale background images
		Syntax
			body {
			  background-image: url('#');
			  background-repeat: no-repeat;
			  background-position: center;
			  background-size: cover;
			}

[@media] - a media query is used to adapt certain CSS rules to certain screen sizes (potentially other use cases) to elements within the query such as the <body> element below
	Syntax
			@media only screen and (max-width: 480px) {
	  body {
 	   font-size: 12px;
 		}
}

*/
